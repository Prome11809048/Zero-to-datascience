# -*- coding: utf-8 -*-
"""Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TaHl7IO1Ktg9vNrDmCiIoaHKxrpUy_R_

NumPy (Numerical Python) is a powerful open-source library in Python used for numerical and scientific computing. It provides support for large, multi-dimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays efficiently. NumPy serves as the foundation for many other scientific libraries in Python, such as Pandas, SciPy, and scikit-learn.

Advantages of NumPy array
1. Allows several mathematical operations
2. Fast operations
"""

import numpy as np

"""List vs Numpy - Time taken"""

from time import process_time

# Time taken for python_list

python_list = [i for i in range(10000)]

start_time = process_time()

python_list = [i+5 for i in python_list]

end_time = process_time()

print(end_time - start_time)

# Time taken by a numPy array

np_array = np.array([i for i in range(10000)])

start_time = process_time()

np_array += 5

end_time = process_time()

print (end_time - start_time)

"""Data type"""

# list

list_1 = [1,2,3,4]
print(list_1)
type(list_1)

# numpy_array

np_array =np.array([1,2,3,4])
print(np_array)
type(np_array)

# 1D array with numpy array

a = np.array([1,2,3,4,5])

print(a)
a.shape

# 2D array with numpy array

b = np.array([(1,2,3,4),(5,6,7,8)])
print(b)
b.shape

# 3D array with numpy array

c = np.array([
    [[1, 2, 3, 4],
     [5, 6, 7, 8],
     [9, 10, 11, 12]],

    [[13, 14, 15, 16],
     [17, 18, 19, 20],
     [21, 22, 23, 24]]
])

print(c)
c.shape

# float datatype
d = np.array([(1,2,3,4), (5,6,7,8)], dtype = float)
print(d)

#Initial placeholder in numPy array
x = np.zeros((4,5))
print(x)

# Create numPy array with ones
y = np.ones((3,3))
print(y)

# Array with particular values
z = np.full((5,4), 5)
print(z)

# Create an identity matrix
p = np.eye(4)
print(p)

# Create a numpy array with random values
pq = np.random.random((3,4))
print(pq)

# Random integer values array within a specific range
q = np.random.randint(10,100,(3,5))
print(q)

# Array of evenly spaced values
d = np.linspace(10,30,5)
print(d)

# Array of evenly spaced values -----> specifing the step
e = np.arange(10,30,5)
print(e)

# Convert a list to numpy array
list_1 = [10, 20, 30, 40, 50]
np_array = np.asarray(list_1)
print(np_array)
type(np_array)

# Analysing a numpy array
c =  np.random.randint(10,90,(5,5))
print(c)

# Array Dimension
print(c.shape)

# Number of dimensions
print(c.ndim)

# Number of elements in an array
print(c.size)

#Check the datatype present in the array

print(c.dtype)

# Mathematical operations on a np array
aa = np.random.randint(0, 10, (3,3))
bb = np.random.randint(10, 20, (3,3))
print(aa)
print(bb)
print(aa+bb)
print(aa-bb)
print(aa*bb)
print(aa/bb)

# Another way
cc = np.random.randint(20, 30, (3,3))
dd = np.random.randint(10, 20, (3,3))
print(cc)
print(dd)
print (np.add(cc,dd))
print (np.subtract(cc,dd))
print (np.multiply(cc,dd))
print (np.divide(cc,dd))

# Array manipulation
array = np.random.randint(0,10,(2,3))
print(array)
print(array.shape)
tran = np.transpose(array)
print(tran)
print(tran.shape)

# Another way
tran2 = array.T
print(tran2)
print(tran2.shape)

# Reshaping array
rp = np.random.randint(0,10,(2,3))
print(rp)
print(rp.shape)
reshaped = np.reshape(re, (3,2))
print(reshaped)
print(reshaped.shape)